======================================================================
도커데스크탑 설치
======================================================================
https://www.docker.com/products/docker-desktop/

======================================================================
※ docker-compose.yml 만들기 ※
======================================================================
1. 폴더구조생성
event-reward-system/
├── docker-compose.yml
├── auth/
│   ├── Dockerfile
│   ├── src/...
│   └── ...

======================================================================
※ mongo DB설치 ※
======================================================================
2. docker-compose.yml 생성 및 작성
(하나씩 install받을 수 있지만, yml을 생성하면 자동으로 이미지 설치가능.)
version: '3.8'

services:
  mongo:
    image: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  auth:
    build: ./auth
    container_name: auth
    ports:
      - "3001:3001"
    depends_on:
      - mongo
    environment:
      - MONGO_URL=mongodb://mongo:27017/auth-db

volumes:
  mongo_data:
======================================================================
※ auth, gateway, event 3개 중, "auth" 생성 절차 시작) ※
======================================================================
1. auth/Dockerfile 생성 및 작성
FROM node:18

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

RUN npm run build

CMD ["node", "dist/main.js"]

-----------------------------------------------------------------------------------------------------------------------
2. 터미널에서 다음 폴더로 이동
cd event-reward-system

-----------------------------------------------------------------------------------------------------------------------
3. auth폴더실행
nest new auth

- 다음과같은 오류시 : 
'nest' 용어가 cmdlet, 함수, 스크립트 파일 또는 실행할 수 있는 프로그램 이름으로 인식되지 않습니다
. 이름이 정확한지 확인하고 경로가 포함된 경우 경로가 올바른지 검증한 다음 다시 시도하십시오.
npm install -g @nestjs/cli

- PowerShell 실행 정책 완화 (아래 명령어를 관리자 권한으로 실행한 PowerShell에서 입력):
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned
- 설명:
-Scope CurrentUser: 현재 사용자만 변경
-ExecutionPolicy RemoteSigned: 로컬에서 만든 스크립트는 허용, 외부에서 다운로드한 스크립트는 서명 필요

그다음, 생성된 auth/ 프로젝트에 다음 의존성을 추가:
cd auth
npm install @nestjs/mongoose mongoose @nestjs/config
npm run start

※ NestJS auth 서비스 생성완료 (auth, gateway, event 3개 중, NestJS 서비스 생성 완료) ※
PS C:\Users\yks\event-reward-system\auth> npm run start

> auth@0.0.1 start
> nest start
정상로그 : 
[Nest] 5256  - 2025. 05. 14. 오후 4:54:31     LOG [NestFactory] Starting Nest application...
[Nest] 5256  - 2025. 05. 14. 오후 4:54:31     LOG [InstanceLoader] AppModule dependencies initialized +10ms
[Nest] 5256  - 2025. 05. 14. 오후 4:54:31     LOG [RoutesResolver] AppController {/}: +4ms
[Nest] 5256  - 2025. 05. 14. 오후 4:54:31     LOG [RouterExplorer] Mapped {/, GET} route +2ms
[Nest] 5256  - 2025. 05. 14. 오후 4:54:31     LOG [NestApplication] Nest application successfully started +2ms
======================================================================
auth, gateway, event 3개 중, "gateway" 생성
======================================================================
1. gateway 생성
cd ..
nest new gateway

======================================================================
auth, gateway, event 3개 중, "event" 생성
======================================================================
1. event 서비스도 nest new event로 동일하게 생성
cd ..
nest new event

======================================================================
※ 각 서비스 디렉토리(auth, gateway, event)에 아래와 같이 Dockerfile을 추가 ※
======================================================================

# Dockerfile
FROM node:20-alpine

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .

RUN npm run build

CMD ["npm", "run", "start:prod"]


======================================================================
※ event-reward-system/루트에 docker-compose.yml 생성 ※
(각 서비스에 대해 .env 또는 config에서 MongoDB와 포트 등을 환경에 맞게 연결하는 작업)
======================================================================
1. docker-compose.yml 생성
version: '3.8'
services:
  mongo:
    image: mongo:5
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  auth:
    build: ./auth
    ports:
      - "3001:3000"
    depends_on:
      - mongo

  event:
    build: ./event
    ports:
      - "3002:3000"
    depends_on:
      - mongo

  gateway:
    build: ./gateway
    ports:
      - "3000:3000"
    depends_on:
      - auth
      - event

volumes:
  mongo_data:

======================================================================
※ 실행 ※
======================================================================
1. 실행 
docker-compose up --build

실행시, 도커데스크탑에 이미지 4개와, 컨테이너1개 생성되며 실행됨.

mongo : 27017
gateway 서비스 : http://localhost:3000/
auth 서비스 : http://localhost:3001/
event 서비스 : http://localhost:3002/

컨테이너 로그 확인 : docker-compose logs -f auth



다음 단계

1. 인증 / 권한 시스템 (Auth 서버)
 회원가입 API (POST /auth/register)

 로그인 API (POST /auth/login)

 JWT 발급

 유저 역할 관리 (USER, OPERATOR, AUDITOR, ADMIN)

 MongoDB에 사용자 및 역할 저장

2. Gateway에서 인증/인가 처리
 @UseGuards(AuthGuard, RolesGuard) 구성

 JWT 검증 및 유저 역할에 따른 API 접근 제한

3. 이벤트 / 보상 시스템 (Event 서버)
 이벤트 생성/조회 API (관리자/운영자용)

 보상 생성/조회 API (이벤트에 귀속됨)

 유저 보상 요청 API (POST /rewards/request)

 조건 검증 및 지급 기록

 지급 이력 조회 API

======================================================================


1. 컨테이너 중지 및 삭제
docker compose down

2. 이미지 재빌드 (수정사항 반영)
docker compose build

3. 컨테이너 재실행
docker compose up -d
or
docker compose up -d --build

4. 합쳐진 명령어(중지 및 삭제 후 재빌드)
docker compose down ; docker compose up --build

POSTMAN사용
- 회원가입 : 
http://localhost:3001/auth/register
{
	"username": "testuser1",
    "password":"123123",
    "role":"USER"
}

- POSTMAN로그인 : 
http://localhost:3001/auth/login
{
  "username": "testuser1",
  "password": "123123"
}


회원가입확인방법 : 
docker exec -it mongo mongosh
use auth-db
db.users.find().pretty()

MongoDB에서 기존 testuser1 삭제
use auth-db
db.users.deleteMany({ username: "testuser1" })
